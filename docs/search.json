[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "book",
    "section": "",
    "text": "1 Welcome"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "2  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\nHelloooooos wassuuup\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "i-analyzer.html#slides",
    "href": "i-analyzer.html#slides",
    "title": "3  Text Mining with iAnalyzer",
    "section": "3.1 Slides",
    "text": "3.1 Slides"
  },
  {
    "objectID": "i-analyzer.html#exercise",
    "href": "i-analyzer.html#exercise",
    "title": "3  Text Mining with iAnalyzer",
    "section": "3.2 Exercise:",
    "text": "3.2 Exercise:\nTo perform a first search, follow these steps:\n\nGo to the iAnalyzer website: https://ianalyzer.hum.uu.nl/\n\nLogin with your solisID\nPerform a search with these criteria:\n\n\n\n\n\n\n\n\n\nCorpus\nTimes (select at the top left from the dropdown menu ‘corpora’)\n\n\nQuery\n‘European Union’\n\n\nPublication Date\nFrom 1945 onwards\n\n\nOCR confidence\n80-100 (explanation of the OCR score is at the bottom of the page)\n\n\nPage Type\nStandard\n\n\nOn Front Page\nYes (So leave ‘false’-box unchecked)\n\n\nPublication Date\nFrom 1945 onwards\n\n\nCategory\nNews\n\n\nIllustration\nNo (So leave all boxes unchecked)\n\n\n\n\n\nCheck out the different visualizations (in the top, right next to the header ‘Filters’)\nDownload the data in a CSV format (At the top of the page, “download CSV”). Make sure that before you download the file, you click on the small gears icon next to the download button, click “show default fields”, and check the box “content”. Otherwise, your downloaded file will not contain the actual text of the articles."
  },
  {
    "objectID": "i-analyzer.html#homework",
    "href": "i-analyzer.html#homework",
    "title": "3  Text Mining with iAnalyzer",
    "section": "3.3 Homework",
    "text": "3.3 Homework\nWhen you have managed to successfully download the CSV file (check for content in the file!), you can go ahead and perform your own search. For that, you need to first build a proper search string and then download the corresponding CSV file. Below you find a table (“cheat sheet”) which explains the operators which you need to use for the search string. Please make sure that for the next session (where we are going to use R to analyze the text data), you have your CSV file ready!\n\n3.3.1 Cheatsheet for Search Queries\n\n\n\nOperator\nDescription\nExample/Explanation\n\n\n\n\n+\nmeans AND\nbank +assets\n\n\n|\nmeans OR\nbank |assets -> Note that OR is already the default way to combine search terms, so “bank assets” would be sufficient in this example.\n\n\n-\nmeans NOT\nbank -assets\n\n\n” ”\nentire phrase\nallows the search for an entire phrase: “the assets of the bank”\n\n\n*\nwildcard\nA wildcard for any number of characters, e.g. bank* will match banking, banks, banked, etc. The wildcard is only allowed at the end of a word, and cannot be used with phrases (between ” quotes).\n\n\n~N\nfuzzy search\nDescribes fuzzy search. When placed after a term this signifies how many characters are allowed to differ. So bank~1 also matches bang, sank, dank etc. When placed after a phrase, this signifies how many words may differ\n\n\n\n\n\n3.3.2 Explanation OCR scores\nOCR stands for “Optical character recognition” and it is a key tool for text mining. OCR uses machine learning to extract words and lines of text from scans and images, which can then be used to perform quantitative text analysis or natural language processing.As you can imagine, dependent on the image/scan quality, the writing (machine vs. hand-written) etc., the automated recognition of characters will not be perfect. The OCR score is a metric used to quantify the accuracy of the text extraction (in other words, the score reflects how likely it is that there are errors in the text extraction)"
  },
  {
    "objectID": "base-r.html#lets-get-started-what-is-r-and-rstudio",
    "href": "base-r.html#lets-get-started-what-is-r-and-rstudio",
    "title": "4  Base R",
    "section": "4.1 Let’s get started: what is R and RStudio",
    "text": "4.1 Let’s get started: what is R and RStudio\nThis describes the basic idea of R and RStudio and how to work in the RStudio environment.\n\n4.1.1 Slides\nFor this part, just consider the slides 12 - 16.\n\n\n\n\n\n\n\n\nUse this link to open slides in a new tab (refer to slide #12)\n\n\n4.1.2 Code Chunk\nThis is an example of a so-called code chunk in which you write the actual code.\n\n#let's define x \nx <- 6\nx\n\ny <- \"apple\"\ny\n\n\n\n4.1.3 Video"
  },
  {
    "objectID": "base-r.html#r-syntax-data-types",
    "href": "base-r.html#r-syntax-data-types",
    "title": "4  Base R",
    "section": "4.2 R Syntax & Data Types",
    "text": "4.2 R Syntax & Data Types\nNow we go a step further in the “language” of R and we learn how to assign variables and math functions, and what kind of different data types there are. We create vectors and lists. Just start at slide 18 and do the exercises as they come.\n\n4.2.1 Slides\n\n\n\n\n\n\n\n\nUse this link to open slides in a new tab (refer to slide #18)\n\n\n4.2.2 Code Chunk\n\n#let's define x \nx <- 1\nx\n\nx*3\n\ny <- x + 2\nlog2(y)\n\n\n\n4.2.3 Video\n\n\n\n\n\n\n\n\n\n\n\n4.2.4 Exercise 1\n\nDo the following calculation in R: one plus five, divided by nine.\nAssign the result of the calculation to a variable.\nTest if the result of your calculation is larger than 1.\nRound off the result to 1 decimal. Tip: use the Maths Functions section of the Base R cheat sheet!\n\n\n\n4.2.5 Solution 1\n\nSlides\n\n\n\n\n\n\n\n\nUse this link to open slides in a new tab (refer to slide #27)\n\n\nVideo"
  },
  {
    "objectID": "base-r.html#vectors",
    "href": "base-r.html#vectors",
    "title": "4  Base R",
    "section": "4.3 Vectors",
    "text": "4.3 Vectors\nHere, we create vectors and learn what a vector actually is! Just start at slide 28 and do the exercises as they come.\n\n4.3.1 Slides\n\n\n\n\n\n\n\n\nUse this link to open slides in a new tab (refer to slide #28)\n\n\n4.3.2 Code Chunk\n\nc(1,2,3)\nc(\"a\", \"b\", \"c\")\nc(T, TRUE, F)\n\nc(TRUE, \"a\", 3)\n\n# in mathematical operations\n\np <- 1:5\np\nmean(p)\np*2\n\nq <- 5:1\nq\n\np*q\n\n\n\n4.3.3 Video\n\n\n\n\n\n\n\n\n\n\n\n4.3.4 Exercise 2\nMeet Ann, Bob, Chloe, and Dan. 1. Make a character vector with their names, using the function c(). Save the vector as “name”.\n\nHow old are Ann, Bob, Chloe, and Dan? You decide! Design a numeric vector with their respective ages. Save it as “age”.\nWhat is their average age? Use a function in R to calculate this. Tip: use the Maths Functions section of the Base R cheat sheet!\n\n\n\n4.3.5 Solution 2\n\nSlides\n\n\n\n\n\n\n\n\nUse this link to open slides in a new tab (refer to slide #38)\n\n\nVideo"
  },
  {
    "objectID": "base-r.html#data-structures",
    "href": "base-r.html#data-structures",
    "title": "4  Base R",
    "section": "4.4 Data structures",
    "text": "4.4 Data structures\nHere, we look at different data structures. Can we combine vectors, and lists? And how can we come up with a data frame? This will all be answered here. Just start at slide 41 and do the exercises as they come.\n\n4.4.1 Slides\n\n\n\n\n\n\n\n\nUse this link to open slides in a new tab (refer to slide #41)\n\n\n4.4.2 Code Chunk\n\n# vectors\n# two vectors: name and age from exercise before\nname\nage\n\n#combine vectors to a unidimensional vector:\nc(name,age)\n\n#combine vectors to multidimensional list:\nlist(name,age)\n\n#combine vectors to twodimensional data frame:\ndata.frame(name,age)\n\n#factors\n\ncountry <- c(\"UK\", \"USA\", \"USA\", \"UK\")\nfactor(country)\n\n#usually as column in a data frame: a categorial variable\n\ndf <- data.frame(name, age, country = factor(country))\ndf\n\nsummary(df)\n\n\n\n4.4.3 Video\n\n\n\n\n\n\n\n\n\n\n\n4.4.4 Exercise 3\n\nCreate a vector country containing four countries (use at least one duplicate!).\nCreate a data frame combining name, age, and country, and save it as df.\nCheck your dataframe with the function summary(). Does it contain a factor?\nMake sure your column country is a factor, and confirm this with summary().\nCreate a list with your vectors name and age, and save it as mylist.\n\n\n\n4.4.5 Solution 3\n\nSlides\n\n\n\n\n\n\n\n\nUse this link to open slides in a new tab (refer to slide #48)\n\n\nVideo"
  },
  {
    "objectID": "base-r.html#missing-data",
    "href": "base-r.html#missing-data",
    "title": "4  Base R",
    "section": "4.5 Missing data",
    "text": "4.5 Missing data\nWhat if for a data subject you do not have the data? How can you handle that in a data frame? We check here. Just start at slide 53 and do the exercises as they come.\n\n4.5.1 Slides\n\n\n\n\n\n\n\n\nUse this link to open slides in a new tab (refer to slide #53)\n\n\n4.5.2 Code Chunk\n\n# Data is not available: NA\ndf$pet <- factor(c(\"cat\", \"none\", \"fish\", NA))\ndf$pet\n\n\n\n4.5.3 Video\n\n\n\n\n\n\n\n\n\nStart the video at\n\n\n4.5.4 Exercise 4\nPredict the results before you run the code. Does the real answer make sense to you?\n\n\n4.5.5 Solution 4\n\nSlides\n\n\n\n\n\n\n\n\nUse this link to open slides in a new tab (refer to slide #57)"
  },
  {
    "objectID": "base-r.html#indexing-vectors-and-lists",
    "href": "base-r.html#indexing-vectors-and-lists",
    "title": "4  Base R",
    "section": "4.6 Indexing vectors and lists",
    "text": "4.6 Indexing vectors and lists\nHere we explain how you get to one specific value or column or data entry in your vector, or list. Just start at slide 66 and do the exercises as they come.\n\n4.6.1 Slides\n\n\n\n\n\n\n\n\nUse this link to open slides in a new tab (refer to slide #66)\n\n\n4.6.2 Code Chunk\n\n# in vector name:selecting by position\nname\nname[2]\nname[1:3]\nname[c(2,2,1)]\n\n# in vector age: selcting by value\nage\nage[age > 40]\nage > 40\n\nname\nname[name %in% c(\"Chloe\", \"Ann\", \"Evie\")]\n\n# selecting from list\nmylist\n# selecting a list element\nmylist[1]\n# subselecting in the list element\nmylist[1][2]\n# selecting the content of a list element\nmylist[[1]]\n# subselecting in the content of a list element\nmylist[[1]][[2]]\n\n\n\n4.6.3 Video\n\n\n\n\n\n\n\n\n\nStart the video at\n\n\n4.6.4 Exercise 5\n\nReturn only the first number in your vector age.\nReturn the 2nd and 4th name in your vector name.\nReturn only ages under 30 from your vector age.\nReturn the name “Chloe” from your list mylist (see exercise 3).\n\n\n\n4.6.5 Solution 5\n\nSlides\n\n\n\n\n\n\n\n\nUse this link to open slides in a new tab (refer to slide #76)\n\n\nVideo"
  },
  {
    "objectID": "base-r.html#indexing-a-data-frame",
    "href": "base-r.html#indexing-a-data-frame",
    "title": "4  Base R",
    "section": "4.7 Indexing a data frame",
    "text": "4.7 Indexing a data frame\nHere we explain how you get to one specific value or column or data entry in your data frame. Just start at slide 80 and do the exercises as they come.\n\n4.7.1 Slides\n\n\n\n\n\n\n\n\nUse this link to open slides in a new tab (refer to slide #80)\n\n\n4.7.2 Code Chunk\n\n#indexing columns\n# by position\ndf[,2]\n\n# by name as a character string\ndf[, \"age\"]\n\n# by name, as an object\ndf$age\n\n#indexing rows\n# by position\ndf[2,]\n\n# by content\ndf[df$name =\"Bob\",]\n\n#combining rows and columns\ndf[df$name = \"Bob\", \"age\"]\n\n\n\n4.7.3 Video\n\n\n\n\n\n\n\n\n\nStart the video at\n\n\n4.7.4 Exercise 6\nBefore you start, please run this code:\n\nrm(name,age,country)\n\n\nFrom your dataframe df, return the entries for everyone living in a country of your choice.\nReturn only the names of everyone in your data frame df under 40. (Hint: what information should you use for row indexing? What information should you use for column indexing?)\nReturn the columns name and age together.\n\n\n\n4.7.5 Solution 6\n\nSlides\n\n\n\n\n\n\n\n\nUse this link to open slides in a new tab (refer to slide #89)\n\n\nVideo"
  },
  {
    "objectID": "base-r.html#recap",
    "href": "base-r.html#recap",
    "title": "4  Base R",
    "section": "4.8 Recap",
    "text": "4.8 Recap\n\n4.8.1 Slides\n\n\n\n\n\n\n\n\nUse this link to open slides in a new tab (refer to slide #92)\nYou made it - yeah! This was the basic introduction to R to get you started. If you want to continue with the slides, feel free to do so :)"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  }
]